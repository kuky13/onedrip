/**
 * Script de teste para verificar redirecionamento de usu√°rios com licen√ßas inativas
 * para /verify-licenca
 */

import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oghjlypdnmqecaavekyr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NTI3NTcsImV4cCI6MjA2MTUyODc1N30.aor71Dj3pcEa7N82vGdW5MlciiNnl1ISqAimEyPbbJY';
const supabase = createClient(supabaseUrl, supabaseKey);

// Simula√ß√£o da configura√ß√£o de rotas
const routeConfig = {
  protectedRoutes: {
    '/dashboard': {
      requiresAuth: true,
      requiresLicense: true,
      role: 'user',
      permission: 'read'
    },
    '/painel': {
      requiresAuth: true,
      requiresLicense: true,
      role: 'user',
      permission: 'read'
    }
  },
  redirects: {
    inactiveLicense: '/verify-licenca',
    expiredLicense: '/verify-licenca',
    invalidLicense: '/licenca'
  }
};

// Simula√ß√£o do RouteMiddleware
class TestRouteMiddleware {
  constructor(config) {
    this.config = config;
  }

  async checkLicenseStatus(userId) {
    try {
      console.log(`üîç Verificando status da licen√ßa para usu√°rio: ${userId}`);
      
      const { data, error } = await supabase.rpc('validate_user_license_complete', {
        p_user_id: userId
      });

      if (error) {
        console.error('‚ùå Erro ao verificar licen√ßa:', error);
        return { status: 'error', error };
      }

      console.log(`üìã Status da licen√ßa:`, data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o de licen√ßa:', error);
      return { status: 'error', error };
    }
  }

  async canAccessRoute(route, userId) {
    console.log(`\nüõ°Ô∏è Verificando acesso √† rota: ${route} para usu√°rio: ${userId}`);
    
    const routeProtection = this.config.protectedRoutes[route];
    if (!routeProtection) {
      console.log(`‚úÖ Rota ${route} n√£o protegida - acesso permitido`);
      return { canAccess: true };
    }

    if (routeProtection.requiresLicense) {
      const licenseStatus = await this.checkLicenseStatus(userId);
      
      if (licenseStatus.status === 'error') {
        console.log(`‚ùå Erro na verifica√ß√£o - redirecionando para ${this.config.redirects.invalidLicense}`);
        return {
          canAccess: false,
          redirect: this.config.redirects.invalidLicense,
          reason: 'license_check_error'
        };
      }

      switch (licenseStatus.status) {
        case 'active':
          console.log(`‚úÖ Licen√ßa ativa - acesso permitido √† ${route}`);
          return { canAccess: true };
        
        case 'inactive':
          console.log(`‚ö†Ô∏è Licen√ßa inativa - redirecionando para ${this.config.redirects.inactiveLicense}`);
          return {
            canAccess: false,
            redirect: this.config.redirects.inactiveLicense,
            reason: 'inactive_license'
          };
        
        case 'expired':
          console.log(`‚è∞ Licen√ßa expirada - redirecionando para ${this.config.redirects.expiredLicense}`);
          return {
            canAccess: false,
            redirect: this.config.redirects.expiredLicense,
            reason: 'expired_license'
          };
        
        case 'not_found':
          console.log(`üö´ Licen√ßa n√£o encontrada - redirecionando para ${this.config.redirects.invalidLicense}`);
          return {
            canAccess: false,
            redirect: this.config.redirects.invalidLicense,
            reason: 'no_license'
          };
        
        default:
          console.log(`‚ùì Status desconhecido: ${licenseStatus.status} - redirecionando para ${this.config.redirects.invalidLicense}`);
          return {
            canAccess: false,
            redirect: this.config.redirects.invalidLicense,
            reason: 'unknown_status'
          };
      }
    }

    console.log(`‚úÖ Acesso permitido √† ${route}`);
    return { canAccess: true };
  }
}

// Fun√ß√£o para buscar usu√°rios com licen√ßas inativas
async function findUsersWithInactiveLicenses() {
  console.log('üîç Buscando usu√°rios com licen√ßas inativas...');
  
  try {
    const { data: licenses, error } = await supabase
      .from('licenses')
      .select(`
        id,
        user_id,
        status,
        expires_at,
        users!inner(id, email)
      `)
      .eq('status', 'inactive')
      .limit(3);

    if (error) {
      console.error('‚ùå Erro ao buscar licen√ßas inativas:', error);
      return [];
    }

    console.log(`üìä Encontradas ${licenses?.length || 0} licen√ßas inativas`);
    return licenses || [];
  } catch (error) {
    console.error('‚ùå Erro na busca:', error);
    return [];
  }
}

// Fun√ß√£o principal de teste
async function testInactiveLicenseRedirect() {
  console.log('üöÄ Iniciando teste de redirecionamento para licen√ßas inativas\n');
  
  const middleware = new TestRouteMiddleware(routeConfig);
  const routesToTest = ['/dashboard', '/painel'];
  
  // Buscar usu√°rios com licen√ßas inativas
  const inactiveUsers = await findUsersWithInactiveLicenses();
  
  if (inactiveUsers.length === 0) {
    console.log('‚ö†Ô∏è Nenhum usu√°rio com licen√ßa inativa encontrado para teste');
    console.log('üìù Criando cen√°rio de teste simulado...');
    
    // Teste com usu√°rio simulado
    const testUserId = 'test-inactive-user-id';
    console.log(`\nüß™ Testando com usu√°rio simulado: ${testUserId}`);
    
    for (const route of routesToTest) {
      const result = await middleware.canAccessRoute(route, testUserId);
      
      if (!result.canAccess && result.redirect === '/verify-licenca') {
        console.log(`‚úÖ SUCESSO: Usu√°rio com licen√ßa inativa redirecionado corretamente para ${result.redirect}`);
      } else {
        console.log(`‚ùå FALHA: Redirecionamento incorreto para rota ${route}`);
        console.log(`   Esperado: /verify-licenca`);
        console.log(`   Recebido: ${result.redirect || 'nenhum redirecionamento'}`);
      }
    }
    return;
  }
  
  // Testar com usu√°rios reais
  for (const user of inactiveUsers) {
    console.log(`\nüë§ Testando usu√°rio: ${user.users.email} (ID: ${user.user_id})`);
    console.log(`üìÑ Status da licen√ßa: ${user.status}`);
    
    for (const route of routesToTest) {
      const result = await middleware.canAccessRoute(route, user.user_id);
      
      if (!result.canAccess && result.redirect === '/verify-licenca') {
        console.log(`‚úÖ SUCESSO: Usu√°rio redirecionado corretamente para ${result.redirect}`);
      } else {
        console.log(`‚ùå FALHA: Redirecionamento incorreto para rota ${route}`);
        console.log(`   Esperado: /verify-licenca`);
        console.log(`   Recebido: ${result.redirect || 'nenhum redirecionamento'}`);
      }
    }
  }
  
  console.log('\nüèÅ Teste de redirecionamento conclu√≠do!');
}

// Executar teste
testInactiveLicenseRedirect().catch(console.error);