import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oghjlypdnmqecaavekyr.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTk1Mjc1NywiZXhwIjoyMDYxNTI4NzU3fQ.l_vuiwdlSERbCQ4vDHBS0oxhEhP7VfWliMhMpQDqpys';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testLicenseExpiration() {
  console.log('üß™ Testando sistema de expira√ß√£o autom√°tica de licen√ßas...');
  console.log('=' .repeat(70));
  
  try {
    // 1. Primeiro, vamos verificar a licen√ßa expirada existente
    console.log('\n1. Verificando licen√ßa expirada existente:');
    const { data: expiredLicenses, error: expiredError } = await supabase
      .from('licenses')
      .select('*')
      .lt('expires_at', new Date().toISOString())
      .order('expires_at', { ascending: false });
    
    if (expiredError) {
      console.log('‚ùå Erro ao buscar licen√ßas expiradas:', expiredError.message);
    } else if (expiredLicenses && expiredLicenses.length > 0) {
      console.log(`üìã Encontradas ${expiredLicenses.length} licen√ßas expiradas:`);
      expiredLicenses.forEach((license, index) => {
        const daysExpired = Math.floor((new Date() - new Date(license.expires_at)) / (1000 * 60 * 60 * 24));
        console.log(`   ${index + 1}. C√≥digo: ${license.code}`);
        console.log(`      ID: ${license.id}`);
        console.log(`      Status is_active: ${license.is_active}`);
        console.log(`      Expirou em: ${license.expires_at}`);
        console.log(`      Dias expirada: ${daysExpired}`);
        console.log(`      User ID: ${license.user_id || 'N√£o atribu√≠da'}`);
        console.log('');
      });
    } else {
      console.log('‚úÖ Nenhuma licen√ßa expirada encontrada');
    }
    
    // 2. Criar uma licen√ßa de teste com data de expira√ß√£o no passado
    console.log('\n2. Criando licen√ßa de teste com data expirada:');
    const testCode = `TEST_EXPIRED_${Date.now()}`;
    const expiredDate = new Date();
    expiredDate.setDate(expiredDate.getDate() - 7); // 7 dias atr√°s
    
    const { data: newLicense, error: createError } = await supabase
      .from('licenses')
      .insert({
        code: testCode,
        expires_at: expiredDate.toISOString(),
        is_active: true, // Criamos como ativa para testar se ser√° automaticamente desativada
        activated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (createError) {
      console.log('‚ùå Erro ao criar licen√ßa de teste:', createError.message);
      return;
    }
    
    console.log(`‚úÖ Licen√ßa de teste criada:`);
    console.log(`   C√≥digo: ${newLicense.code}`);
    console.log(`   ID: ${newLicense.id}`);
    console.log(`   Status inicial: ${newLicense.is_active ? 'ATIVA' : 'INATIVA'}`);
    console.log(`   Data de expira√ß√£o: ${newLicense.expires_at}`);
    
    // 3. Aguardar um pouco e verificar se o status mudou
    console.log('\n3. Aguardando 5 segundos para verificar se h√° atualiza√ß√£o autom√°tica...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    const { data: updatedLicense, error: checkError } = await supabase
      .from('licenses')
      .select('*')
      .eq('id', newLicense.id)
      .single();
    
    if (checkError) {
      console.log('‚ùå Erro ao verificar licen√ßa atualizada:', checkError.message);
    } else {
      console.log(`üìã Status da licen√ßa ap√≥s 5 segundos:`);
      console.log(`   Status is_active: ${updatedLicense.is_active ? 'ATIVA' : 'INATIVA'}`);
      
      if (updatedLicense.is_active === newLicense.is_active) {
        console.log('   ‚ö†Ô∏è Status n√£o mudou - pode n√£o haver atualiza√ß√£o autom√°tica imediata');
      } else {
        console.log('   ‚úÖ Status mudou - h√° atualiza√ß√£o autom√°tica!');
      }
    }
    
    // 4. Testar a fun√ß√£o is_user_license_active com a licen√ßa de teste
    console.log('\n4. Testando fun√ß√£o is_user_license_active com licen√ßa expirada:');
    
    // Primeiro, vamos atribuir a licen√ßa a um usu√°rio de teste
    const testUserId = '00000000-0000-0000-0000-000000000001'; // UUID de teste
    
    const { error: updateError } = await supabase
      .from('licenses')
      .update({ user_id: testUserId })
      .eq('id', newLicense.id);
    
    if (updateError) {
      console.log('‚ùå Erro ao atribuir usu√°rio √† licen√ßa:', updateError.message);
    } else {
      console.log(`‚úÖ Licen√ßa atribu√≠da ao usu√°rio de teste: ${testUserId}`);
      
      // Testar a fun√ß√£o
      const { data: isActive, error: funcError } = await supabase
        .rpc('is_user_license_active', { p_user_id: testUserId });
      
      if (funcError) {
        console.log('‚ùå Erro ao testar fun√ß√£o:', funcError.message);
      } else {
        console.log(`üìã Resultado da fun√ß√£o is_user_license_active: ${isActive ? 'ATIVA' : 'INATIVA'}`);
        console.log(`üìã Status no banco (is_active): ${updatedLicense.is_active ? 'ATIVA' : 'INATIVA'}`);
        
        if (!isActive && updatedLicense.is_active) {
          console.log('‚úÖ CONFIRMADO: Fun√ß√£o corretamente identifica licen√ßa expirada como inativa');
          console.log('   mesmo que is_active seja true no banco de dados');
        } else if (!isActive && !updatedLicense.is_active) {
          console.log('‚úÖ CONFIRMADO: Licen√ßa expirada est√° corretamente marcada como inativa');
        } else if (isActive) {
          console.log('‚ö†Ô∏è PROBLEMA: Fun√ß√£o retorna ativa para licen√ßa expirada');
        }
      }
    }
    
    // 5. Aguardar mais tempo para verificar se h√° algum job cron que roda periodicamente
    console.log('\n5. Aguardando mais 30 segundos para verificar jobs cron peri√≥dicos...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    const { data: finalCheck, error: finalError } = await supabase
      .from('licenses')
      .select('*')
      .eq('id', newLicense.id)
      .single();
    
    if (finalError) {
      console.log('‚ùå Erro na verifica√ß√£o final:', finalError.message);
    } else {
      console.log(`üìã Status final da licen√ßa ap√≥s 35 segundos total:`);
      console.log(`   Status is_active: ${finalCheck.is_active ? 'ATIVA' : 'INATIVA'}`);
      
      if (finalCheck.is_active !== newLicense.is_active) {
        console.log('‚úÖ CONFIRMADO: H√° atualiza√ß√£o autom√°tica do status!');
        console.log('   O sistema automaticamente marca licen√ßas expiradas como inativas');
      } else if (finalCheck.is_active === true) {
        console.log('‚ùå CONFIRMADO: N√ÉO h√° atualiza√ß√£o autom√°tica do status!');
        console.log('   Licen√ßas expiradas permanecem marcadas como ativas no banco');
        console.log('   A valida√ß√£o de expira√ß√£o √© feita apenas na fun√ß√£o is_user_license_active');
      }
    }
    
    // 6. Limpar - remover a licen√ßa de teste
    console.log('\n6. Limpando licen√ßa de teste...');
    const { error: deleteError } = await supabase
      .from('licenses')
      .delete()
      .eq('id', newLicense.id);
    
    if (deleteError) {
      console.log('‚ùå Erro ao remover licen√ßa de teste:', deleteError.message);
      console.log(`‚ö†Ô∏è Licen√ßa de teste ${testCode} (ID: ${newLicense.id}) precisa ser removida manualmente`);
    } else {
      console.log('‚úÖ Licen√ßa de teste removida com sucesso');
    }
    
    console.log('\n' + '=' .repeat(70));
    console.log('üìã CONCLUS√ÉO DO TESTE');
    console.log('=' .repeat(70));
    
    if (finalCheck && finalCheck.is_active === false && newLicense.is_active === true) {
      console.log('‚úÖ RESULTADO: Sistema possui atualiza√ß√£o autom√°tica!');
      console.log('\nüìù DETALHES:');
      console.log('   ‚Ä¢ Licen√ßa criada como ativa com data expirada');
      console.log('   ‚Ä¢ Sistema automaticamente atualizou is_active para false');
      console.log('   ‚Ä¢ H√° um mecanismo (trigger/job) que monitora licen√ßas expiradas');
    } else {
      console.log('‚ùå RESULTADO: Sistema N√ÉO possui atualiza√ß√£o autom√°tica!');
      console.log('\nüìù DETALHES:');
      console.log('   ‚Ä¢ Licen√ßa expirada permanece com is_active = true');
      console.log('   ‚Ä¢ Valida√ß√£o de expira√ß√£o √© feita apenas na consulta');
      console.log('   ‚Ä¢ Fun√ß√£o is_user_license_active faz a valida√ß√£o em tempo real');
      console.log('   ‚Ä¢ Campo is_active no banco pode estar inconsistente');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testLicenseExpiration();