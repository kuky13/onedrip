import { useEffect, useRef } from 'react';
import { useAuth } from '../hooks/useAuth';
import { routeMiddleware } from '../middleware/routeMiddleware';
import { supabase } from '../integrations/supabase/client';
import { useLocation } from 'react-router-dom';

interface LicenseStatusMonitorProps {
  onLicenseStatusChange?: (status: 'active' | 'inactive') => void;
}

/**
 * Componente invis√≠vel que monitora mudan√ßas no status da licen√ßa em tempo real
 * Utiliza Supabase Realtime para detectar altera√ß√µes e redirecionar automaticamente
 */
export const LicenseStatusMonitor: React.FC<LicenseStatusMonitorProps> = ({
  onLicenseStatusChange
}) => {
  const { user } = useAuth();
  const location = useLocation();
  const lastStatusRef = useRef<string | null>(null);
  const monitorIntervalRef = useRef<NodeJS.Timeout>();
  const subscriptionRef = useRef<any>(null);

  useEffect(() => {
    if (!user) {
      // Limpar monitoramento se usu√°rio n√£o estiver logado
      if (subscriptionRef.current) {
        subscriptionRef.current.unsubscribe();
        subscriptionRef.current = null;
      }
      if (monitorIntervalRef.current) {
        clearInterval(monitorIntervalRef.current);
        monitorIntervalRef.current = undefined;
      }
      return;
    }

    console.log('üîç Iniciando monitoramento de licen√ßa para usu√°rio:', user.id);

    // Monitoramento em tempo real via Supabase Realtime
    const setupRealtimeMonitoring = () => {
      subscriptionRef.current = supabase
        .channel(`license_changes_${user.id}`)
        .on(
          'postgres_changes',
          {
            event: 'UPDATE',
            schema: 'public',
            table: 'licenses',
            filter: `user_id=eq.${user.id}`
          },
          (payload) => {
            console.log('üì° Mudan√ßa detectada na licen√ßa:', payload);
            
            const oldLicense = payload.old as any;
            const newLicense = payload.new as any;
            
            // Ignorar mudan√ßas que s√£o apenas do last_validation (para evitar loops)
            if (oldLicense && newLicense && 
                oldLicense.is_active === newLicense.is_active &&
                oldLicense.expires_at === newLicense.expires_at &&
                oldLicense.user_id === newLicense.user_id) {
              console.log('üîç Ignorando atualiza√ß√£o de last_validation apenas');
              return;
            }
            
            const currentStatus = newLicense.is_active ? 'active' : 'inactive';
            
            if (lastStatusRef.current !== currentStatus) {
              lastStatusRef.current = currentStatus;
              
              console.log(`üîÑ Status da licen√ßa alterado para: ${currentStatus}`);
              
              // Invalidar cache do middleware
              routeMiddleware.invalidateState();
              
              // Notificar mudan√ßa via callback
              onLicenseStatusChange?.(currentStatus);
              
              // Se licen√ßa foi desativada, for√ßar redirecionamento
              if (currentStatus === 'inactive') {
                console.warn('üö´ Licen√ßa desativada - redirecionando para verifica√ß√£o');
                
                // Aguardar um pouco para garantir que o estado foi invalidado
                setTimeout(() => {
                  window.location.href = '/verify-licenca';
                }, 100);
              }
            }
          }
        )
        .subscribe((status) => {
          if (status === 'SUBSCRIBED') {
            console.log('‚úÖ Monitoramento em tempo real ativo');
          } else if (status === 'CHANNEL_ERROR') {
            console.error('‚ùå Erro no canal de monitoramento');
            // Tentar reconectar ap√≥s 5 segundos
            setTimeout(setupRealtimeMonitoring, 5000);
          }
        });
    };

    // Iniciar monitoramento em tempo real
    setupRealtimeMonitoring();

    // Verifica√ß√£o peri√≥dica como fallback (a cada 2 minutos)
    const setupPeriodicCheck = () => {
      monitorIntervalRef.current = setInterval(async () => {
        try {
          console.log('üîÑ Verifica√ß√£o peri√≥dica de licen√ßa');
          
          const result = await routeMiddleware.canAccessRoute(location.pathname, true);
          
          if (!result.canAccess && result.licenseStatus === 'inactive') {
            console.warn('üö´ Licen√ßa inativa detectada na verifica√ß√£o peri√≥dica');
            
            // Invalidar estado e redirecionar
            routeMiddleware.invalidateState();
            
            onLicenseStatusChange?.('inactive');
            
            // Redirecionar para verifica√ß√£o
            window.location.href = '/verify-licenca';
          }
        } catch (error) {
          console.error('‚ùå Erro na verifica√ß√£o peri√≥dica de licen√ßa:', error);
        }
      }, 2 * 60 * 1000); // 2 minutos
    };

    setupPeriodicCheck();

    // Cleanup ao desmontar ou trocar usu√°rio
    return () => {
      console.log('üßπ Limpando monitoramento de licen√ßa');
      
      if (subscriptionRef.current) {
        subscriptionRef.current.unsubscribe();
        subscriptionRef.current = null;
      }
      
      if (monitorIntervalRef.current) {
        clearInterval(monitorIntervalRef.current);
        monitorIntervalRef.current = undefined;
      }
    };
  }, [user, onLicenseStatusChange, location.pathname]);

  // Verifica√ß√£o inicial do status da licen√ßa usando RPC
  useEffect(() => {
    if (!user) return;

    const checkInitialStatus = async () => {
      try {
        const { data } = await supabase
          .rpc('get_user_license_status', {
            p_user_id: user.id
          });

        if (data && typeof data === 'object') {
          const licenseData = data as { has_license: boolean; is_valid: boolean };
          const initialStatus = (licenseData.has_license && licenseData.is_valid) ? 'active' : 'inactive';
          lastStatusRef.current = initialStatus;
          
          console.log(`üìä Status inicial da licen√ßa: ${initialStatus}`);
          
          // Se j√° est√° inativo, notificar
          if (initialStatus === 'inactive') {
            onLicenseStatusChange?.('inactive');
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao verificar status inicial da licen√ßa:', error);
      }
    };

    checkInitialStatus();
  }, [user, onLicenseStatusChange]);

  // Componente invis√≠vel - n√£o renderiza nada
  return null;
};

export default LicenseStatusMonitor;