import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://oghjlypdnmqecaavekyr.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NTI3NTcsImV4cCI6MjA2MTUyODc1N30.aor71Dj3pcEa7N82vGdW5MlciiNnl1ISqAimEyPbbJY";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testRouteAccess() {
  console.log('üîê Testando acesso √†s rotas protegidas...');
  
  try {
    // Buscar usu√°rios com licen√ßas ativas
    const { data: users, error: usersError } = await supabase
      .from('licenses')
      .select(`
        user_id,
        is_active,
        expires_at,
        code
      `)
      .eq('is_active', true)
      .not('user_id', 'is', null)
      .limit(3);
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
      return;
    }
    
    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio com licen√ßa ativa encontrado');
      return;
    }
    
    console.log(`üìã Testando acesso para ${users.length} usu√°rios com licen√ßas ativas`);
    
    for (const user of users) {
      console.log(`\nüë§ Usu√°rio: ${user.user_id}`);
      console.log(`üìÑ C√≥digo da licen√ßa: ${user.code}`);
      console.log(`üìÖ Expira em: ${user.expires_at}`);
      
      // Testar a fun√ß√£o RPC que o RouteMiddleware usa
      const { data: licenseData, error: rpcError } = await supabase
        .rpc('validate_user_license_complete', { p_user_id: user.user_id });
      
      if (rpcError) {
        console.error(`‚ùå Erro na RPC:`, rpcError);
        continue;
      }
      
      console.log(`‚úÖ Status da licen√ßa:`);
      console.log(`  - V√°lida: ${licenseData?.is_valid}`);
      console.log(`  - Ativa: ${licenseData?.is_active}`);
      console.log(`  - Dias restantes: ${licenseData?.days_remaining}`);
      console.log(`  - Requer renova√ß√£o: ${licenseData?.requires_renewal}`);
      
      // Simular verifica√ß√£o do RouteMiddleware
      const shouldAllowAccess = licenseData?.is_valid && licenseData?.is_active;
      
      if (shouldAllowAccess) {
        console.log(`üü¢ ACESSO PERMITIDO √†s rotas /dashboard e /painel`);
      } else {
        console.log(`üî¥ ACESSO NEGADO - usu√°rio seria redirecionado para ativa√ß√£o`);
      }
    }
    
    console.log('\nüéØ Resumo:');
    console.log('- Licen√ßas √≥rf√£s foram removidas');
    console.log('- Fun√ß√£o RPC validate_user_license_complete est√° funcionando corretamente');
    console.log('- RouteMiddleware agora usa a mesma fun√ß√£o RPC');
    console.log('- Usu√°rios com licen√ßas v√°lidas devem ter acesso √†s rotas protegidas');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testRouteAccess();