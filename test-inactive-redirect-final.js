import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oghjlypdnmqecaavekyr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NTI3NTcsImV4cCI6MjA2MTUyODc1N30.aor71Dj3pcEa7N82vGdW5MlciiNnl1ISqAimEyPbbJY';
const supabase = createClient(supabaseUrl, supabaseKey);

// Configura√ß√£o de rotas (baseada no routeConfig.ts)
const routeConfig = {
  protectedRoutes: {
    requiresLicense: ['/dashboard', '/painel'],
    requiresAuth: ['/profile', '/settings']
  },
  redirects: {
    invalidLicense: '/licenca',
    inactiveLicense: '/verify-licenca'
  }
};

// Simula√ß√£o do RouteMiddleware
class TestRouteMiddleware {
  constructor(config) {
    this.config = config;
  }

  async checkLicenseStatus(userId) {
    try {
      console.log(`üîç Verificando status da licen√ßa para usu√°rio: ${userId}`);
      
      const { data, error } = await supabase.rpc('validate_user_license_complete', {
        p_user_id: userId
      });

      if (error) {
        console.error('‚ùå Erro ao verificar licen√ßa:', error.message);
        return { status: 'not_found', lastCheck: Date.now() };
      }

      console.log('üìä Dados da licen√ßa:', {
        has_license: data?.has_license,
        is_valid: data?.is_valid,
        requires_activation: data?.requires_activation,
        requires_renewal: data?.requires_renewal,
        expires_at: data?.expires_at
      });

      // L√≥gica do RouteMiddleware para determinar status
      let status;
      if (!data?.has_license) {
        status = 'not_found';
      } else if (data?.requires_renewal) {
        status = 'expired';
      } else if (!data?.is_valid || data?.requires_activation) {
        status = 'inactive';
      } else {
        status = 'active';
      }

      console.log(`üìã Status determinado: ${status}`);
      return { status, lastCheck: Date.now() };
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o:', error.message);
      return { status: 'not_found', lastCheck: Date.now() };
    }
  }

  async canAccessRoute(route, userId) {
    console.log(`\nüõ°Ô∏è Verificando acesso √† rota: ${route} para usu√°rio: ${userId}`);
    
    // Verificar se a rota requer licen√ßa
    const requiresLicense = this.config.protectedRoutes.requiresLicense.includes(route);
    
    if (!requiresLicense) {
      console.log(`‚úÖ Rota ${route} n√£o requer licen√ßa`);
      return { canAccess: true };
    }

    const licenseCheck = await this.checkLicenseStatus(userId);
    
    if (licenseCheck.status === 'active') {
      console.log(`‚úÖ Acesso permitido - licen√ßa ativa`);
      return { canAccess: true };
    }
    
    // Determinar redirecionamento baseado no status
    let redirectTo;
    if (licenseCheck.status === 'inactive' || licenseCheck.status === 'expired') {
      redirectTo = '/verify-licenca';
      console.log(`‚ùå Acesso negado - redirecionando para ${redirectTo} (status: ${licenseCheck.status})`);
    } else if (licenseCheck.status === 'not_found') {
      redirectTo = this.config.redirects.invalidLicense;
      console.log(`‚ùå Acesso negado - redirecionando para ${redirectTo} (sem licen√ßa)`);
    }
    
    return {
      canAccess: false,
      redirect: redirectTo,
      reason: `Licen√ßa ${licenseCheck.status}`
    };
  }
}

// Fun√ß√£o para buscar usu√°rios com diferentes status de licen√ßa
async function findTestUsers() {
  console.log('üîç Buscando usu√°rios para teste...');
  
  try {
    // Buscar algumas licen√ßas para teste
    const { data: licenses, error } = await supabase
      .from('licenses')
      .select('user_id, is_active, expires_at')
      .limit(5);

    if (error) {
      console.error('‚ùå Erro ao buscar licen√ßas:', error.message);
      return [];
    }

    console.log(`üìã Encontradas ${licenses?.length || 0} licen√ßas`);
    
    const testUsers = [];
    
    for (const license of licenses || []) {
      // Verificar status via RPC para cada usu√°rio
      const { data: rpcData, error: rpcError } = await supabase
        .rpc('validate_user_license_complete', { p_user_id: license.user_id });
      
      if (!rpcError && rpcData) {
        let status = 'unknown';
        if (!rpcData.has_license) {
          status = 'not_found';
        } else if (rpcData.requires_renewal) {
          status = 'expired';
        } else if (!rpcData.is_valid || rpcData.requires_activation) {
          status = 'inactive';
        } else {
          status = 'active';
        }
        
        testUsers.push({
          user_id: license.user_id,
          status: status,
          license_active: license.is_active,
          expires_at: license.expires_at
        });
      }
    }
    
    return testUsers;
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios:', error.message);
    return [];
  }
}

// Fun√ß√£o principal de teste
async function testInactiveLicenseRedirect() {
  console.log('üöÄ Iniciando teste de redirecionamento para licen√ßas inativas\n');
  
  const middleware = new TestRouteMiddleware(routeConfig);
  const routesToTest = ['/dashboard', '/painel'];
  
  // Buscar usu√°rios para teste
  const testUsers = await findTestUsers();
  
  if (testUsers.length === 0) {
    console.log('‚ùå Nenhum usu√°rio encontrado para teste');
    return;
  }
  
  console.log(`\nüìã Testando com ${testUsers.length} usu√°rios:\n`);
  
  let successCount = 0;
  let totalTests = 0;
  
  for (const user of testUsers) {
    console.log(`\nüë§ Usu√°rio: ${user.user_id}`);
    console.log(`üìÑ Status da licen√ßa: ${user.status}`);
    console.log(`üîí Licen√ßa ativa no DB: ${user.license_active}`);
    
    for (const route of routesToTest) {
      totalTests++;
      const result = await middleware.canAccessRoute(route, user.user_id);
      
      // Verificar se o redirecionamento est√° correto
      if (user.status === 'inactive' || user.status === 'expired') {
        if (!result.canAccess && result.redirect === '/verify-licenca') {
          console.log(`‚úÖ SUCESSO: Usu√°rio com licen√ßa ${user.status} redirecionado corretamente para ${result.redirect}`);
          successCount++;
        } else {
          console.log(`‚ùå FALHA: Redirecionamento incorreto para rota ${route}`);
          console.log(`   Status: ${user.status}`);
          console.log(`   Esperado: /verify-licenca`);
          console.log(`   Recebido: ${result.redirect || 'nenhum redirecionamento'}`);
        }
      } else if (user.status === 'not_found') {
        if (!result.canAccess && result.redirect === '/licenca') {
          console.log(`‚úÖ SUCESSO: Usu√°rio sem licen√ßa redirecionado corretamente para ${result.redirect}`);
          successCount++;
        } else {
          console.log(`‚ùå FALHA: Redirecionamento incorreto para usu√°rio sem licen√ßa`);
          console.log(`   Esperado: /licenca`);
          console.log(`   Recebido: ${result.redirect || 'nenhum redirecionamento'}`);
        }
      } else if (user.status === 'active') {
        if (result.canAccess) {
          console.log(`‚úÖ SUCESSO: Usu√°rio com licen√ßa ativa tem acesso permitido`);
          successCount++;
        } else {
          console.log(`‚ùå FALHA: Usu√°rio com licen√ßa ativa foi bloqueado incorretamente`);
        }
      }
    }
  }
  
  console.log(`\nüìä Resultado do teste:`);
  console.log(`‚úÖ Sucessos: ${successCount}/${totalTests}`);
  console.log(`‚ùå Falhas: ${totalTests - successCount}/${totalTests}`);
  
  if (successCount === totalTests) {
    console.log(`\nüéâ TODOS OS TESTES PASSARAM! O redirecionamento est√° funcionando corretamente.`);
  } else {
    console.log(`\n‚ö†Ô∏è Alguns testes falharam. Verifique a l√≥gica de redirecionamento.`);
  }
}

// Executar teste
testInactiveLicenseRedirect().catch(console.error);