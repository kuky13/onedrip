import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oghjlypdnmqecaavekyr.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NTI3NTcsImV4cCI6MjA2MTUyODc1N30.aor71Dj3pcEa7N82vGdW5MlciiNnl1ISqAimEyPbbJY';

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugLicenseIssue() {
  console.log('üîç Investigando problema de licen√ßa ativa mostrando tela de ativa√ß√£o...');
  console.log('=' .repeat(70));

  try {
    // 1. Buscar usu√°rios com licen√ßas ativas
    console.log('\nüìä Buscando usu√°rios com licen√ßas ativas...');
    const { data: activeLicenses, error: licensesError } = await supabase
      .from('licenses')
      .select('*')
      .eq('is_active', true)
      .not('user_id', 'is', null)
      .limit(5);

    if (licensesError) {
      console.error('‚ùå Erro ao buscar licen√ßas:', licensesError);
      return;
    }

    console.log(`‚úÖ Encontradas ${activeLicenses?.length || 0} licen√ßas ativas`);
    
    if (!activeLicenses || activeLicenses.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma licen√ßa ativa encontrada!');
      return;
    }

    // 2. Testar a fun√ß√£o RPC para cada usu√°rio com licen√ßa ativa
    for (const license of activeLicenses) {
      console.log(`\nüß™ Testando usu√°rio: ${license.user_id}`);
      console.log(`   Licen√ßa: ${license.code}`);
      console.log(`   Ativa: ${license.is_active}`);
      console.log(`   Expira em: ${license.expires_at}`);
      console.log(`   Ativada em: ${license.activated_at}`);
      
      // Chamar a fun√ß√£o RPC
      const { data: validation, error: validationError } = await supabase
        .rpc('validate_user_license_complete', { p_user_id: license.user_id });

      if (validationError) {
        console.error(`   ‚ùå Erro na valida√ß√£o RPC:`, validationError);
        continue;
      }

      console.log('   üìã Resultado da valida√ß√£o RPC:');
      console.log(`   - has_license: ${validation?.has_license}`);
      console.log(`   - is_valid: ${validation?.is_valid}`);
      console.log(`   - requires_activation: ${validation?.requires_activation}`);
      console.log(`   - requires_renewal: ${validation?.requires_renewal}`);
      console.log(`   - message: ${validation?.message}`);
      console.log(`   - days_remaining: ${validation?.days_remaining}`);
      
      // An√°lise do problema
      if (validation?.has_license && validation?.is_valid) {
        console.log('   ‚úÖ USU√ÅRIO DEVERIA VER LICEN√áA ATIVA (SEM TELA DE ATIVA√á√ÉO)');
      } else if (validation?.requires_activation) {
        console.log('   üö® PROBLEMA ENCONTRADO: requires_activation = true para licen√ßa ativa!');
      } else if (!validation?.is_valid) {
        console.log('   ‚ö†Ô∏è  PROBLEMA: is_valid = false para licen√ßa ativa');
      }
      
      console.log('   ' + '-'.repeat(50));
    }

    // 3. Verificar se h√° problemas na tabela de licen√ßas
    console.log('\nüîç Verificando inconsist√™ncias na tabela de licen√ßas...');
    const { data: inconsistentLicenses, error: inconsistentError } = await supabase
      .from('licenses')
      .select('*')
      .eq('is_active', true)
      .lt('expires_at', new Date().toISOString());

    if (inconsistentError) {
      console.error('‚ùå Erro ao verificar inconsist√™ncias:', inconsistentError);
    } else {
      console.log(`‚ö†Ô∏è  Encontradas ${inconsistentLicenses?.length || 0} licen√ßas ativas mas expiradas`);
      if (inconsistentLicenses && inconsistentLicenses.length > 0) {
        inconsistentLicenses.forEach(license => {
          console.log(`   - Licen√ßa ${license.code} (usu√°rio: ${license.user_id}) expirou em ${license.expires_at}`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

debugLicenseIssue();