import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://oghjlypdnmqecaavekyr.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NTI3NTcsImV4cCI6MjA2MTUyODc1N30.aor71Dj3pcEa7N82vGdW5MlciiNnl1ISqAimEyPbbJY";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function fixOrphanLicenses() {
  console.log('üîß Corrigindo licen√ßas √≥rf√£s...');
  
  try {
    // Primeiro, vamos ver quantas licen√ßas √≥rf√£s existem
    const { data: orphanLicenses, error: orphanError } = await supabase
      .from('licenses')
      .select('id, code, is_active, expires_at, created_at')
      .is('user_id', null);
    
    if (orphanError) {
      console.error('‚ùå Erro ao buscar licen√ßas √≥rf√£s:', orphanError);
      return;
    }
    
    console.log(`üìã Encontradas ${orphanLicenses?.length || 0} licen√ßas √≥rf√£s (user_id = null)`);
    
    if (!orphanLicenses || orphanLicenses.length === 0) {
      console.log('‚úÖ Nenhuma licen√ßa √≥rf√£ encontrada!');
      return;
    }
    
    // Mostrar detalhes das licen√ßas √≥rf√£s
    orphanLicenses.forEach((license, index) => {
      console.log(`\nüîç Licen√ßa √≥rf√£ ${index + 1}:`);
      console.log(`  ID: ${license.id}`);
      console.log(`  C√≥digo: ${license.code}`);
      console.log(`  Ativa: ${license.is_active}`);
      console.log(`  Expira em: ${license.expires_at}`);
      console.log(`  Criada em: ${license.created_at}`);
    });
    
    // Desativar licen√ßas √≥rf√£s ativas
    const activeLicenses = orphanLicenses.filter(l => l.is_active);
    
    if (activeLicenses.length > 0) {
      console.log(`\nüö® Desativando ${activeLicenses.length} licen√ßas √≥rf√£s ativas...`);
      
      const { error: updateError } = await supabase
        .from('licenses')
        .update({ 
          is_active: false,
          last_validation: new Date().toISOString()
        })
        .is('user_id', null)
        .eq('is_active', true);
      
      if (updateError) {
        console.error('‚ùå Erro ao desativar licen√ßas √≥rf√£s:', updateError);
        return;
      }
      
      console.log('‚úÖ Licen√ßas √≥rf√£s desativadas com sucesso!');
    } else {
      console.log('‚úÖ Nenhuma licen√ßa √≥rf√£ ativa encontrada.');
    }
    
    // Verificar se ainda existem licen√ßas ativas √≥rf√£s
    const { data: remainingOrphans, error: remainingError } = await supabase
      .from('licenses')
      .select('id')
      .is('user_id', null)
      .eq('is_active', true);
    
    if (remainingError) {
      console.error('‚ùå Erro ao verificar licen√ßas √≥rf√£s restantes:', remainingError);
      return;
    }
    
    if (remainingOrphans && remainingOrphans.length > 0) {
      console.log(`‚ö†Ô∏è Ainda existem ${remainingOrphans.length} licen√ßas √≥rf√£s ativas!`);
    } else {
      console.log('‚úÖ Todas as licen√ßas √≥rf√£s foram desativadas!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

fixOrphanLicenses();