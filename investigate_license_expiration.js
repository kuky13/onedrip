import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://oghjlypdnmqecaavekyr.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9naGpseXBkbm1xZWNhYXZla3lyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTk1Mjc1NywiZXhwIjoyMDYxNTI4NzU3fQ.l_vuiwdlSERbCQ4vDHBS0oxhEhP7VfWliMhMpQDqpys';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function investigateLicenseExpiration() {
  console.log('üîç Investigando sistema de expira√ß√£o autom√°tica de licen√ßas...');
  console.log('=' .repeat(70));
  
  try {
    // 1. Verificar todas as licen√ßas e seus status
    console.log('\n1. Analisando todas as licen√ßas:');
    const { data: allLicenses, error: allError } = await supabase
      .from('licenses')
      .select('id, code, user_id, expires_at, is_active, activated_at, created_at')
      .order('created_at', { ascending: false });
    
    if (allError) {
      console.log('‚ùå Erro ao buscar licen√ßas:', allError.message);
      return;
    }
    
    console.log(`üìä Total de licen√ßas encontradas: ${allLicenses.length}`);
    
    // 2. Analisar licen√ßas por status
    const now = new Date();
    const activeLicenses = allLicenses.filter(l => l.is_active === true);
    const inactiveLicenses = allLicenses.filter(l => l.is_active === false);
    const expiredLicenses = allLicenses.filter(l => l.expires_at && new Date(l.expires_at) < now);
    const expiredButActive = allLicenses.filter(l => l.expires_at && new Date(l.expires_at) < now && l.is_active === true);
    const validActiveLicenses = allLicenses.filter(l => l.is_active === true && (!l.expires_at || new Date(l.expires_at) > now));
    
    console.log('\nüìà Estat√≠sticas detalhadas:');
    console.log(`   ‚Ä¢ Licen√ßas ativas: ${activeLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas inativas: ${inactiveLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas expiradas (total): ${expiredLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas expiradas MAS ainda ativas: ${expiredButActive.length}`);
    console.log(`   ‚Ä¢ Licen√ßas ativas e v√°lidas: ${validActiveLicenses.length}`);
    
    // 3. Mostrar detalhes das licen√ßas expiradas mas ativas (se houver)
    if (expiredButActive.length > 0) {
      console.log('\n‚ö†Ô∏è LICEN√áAS EXPIRADAS MAS AINDA MARCADAS COMO ATIVAS:');
      expiredButActive.forEach((license, index) => {
        const daysExpired = Math.floor((now - new Date(license.expires_at)) / (1000 * 60 * 60 * 24));
        console.log(`   ${index + 1}. ID: ${license.id}`);
        console.log(`      C√≥digo: ${license.code}`);
        console.log(`      User ID: ${license.user_id}`);
        console.log(`      Expirou em: ${license.expires_at}`);
        console.log(`      Dias expirada: ${daysExpired}`);
        console.log(`      Status: ${license.is_active ? 'ATIVA' : 'INATIVA'}`);
        console.log('');
      });
    }
    
    // 4. Verificar algumas licen√ßas recentes para entender o padr√£o
    console.log('\nüìã Amostra das 5 licen√ßas mais recentes:');
    const recentLicenses = allLicenses.slice(0, 5);
    recentLicenses.forEach((license, index) => {
      const isExpired = license.expires_at && new Date(license.expires_at) < now;
      const status = license.is_active ? 'üü¢ ATIVA' : 'üî¥ INATIVA';
      const expiredStatus = isExpired ? '‚è∞ EXPIRADA' : '‚úÖ V√ÅLIDA';
      
      console.log(`   ${index + 1}. ${license.code} - ${status} - ${expiredStatus}`);
      console.log(`      Expira em: ${license.expires_at || 'Nunca'}`);
      if (isExpired && license.is_active) {
        console.log(`      ‚ö†Ô∏è PROBLEMA: Expirada mas ainda ativa!`);
      }
      console.log('');
    });
    
    // 5. Testar fun√ß√£o is_user_license_active com usu√°rios espec√≠ficos
    console.log('\nüß™ Testando fun√ß√£o is_user_license_active:');
    const usersToTest = [...new Set(allLicenses.filter(l => l.user_id).map(l => l.user_id))].slice(0, 3);
    
    for (const userId of usersToTest) {
      const userLicense = allLicenses.find(l => l.user_id === userId);
      const { data: isActive, error: testError } = await supabase
        .rpc('is_user_license_active', { p_user_id: userId });
      
      if (testError) {
        console.log(`   ‚ùå Erro ao testar usu√°rio ${userId}: ${testError.message}`);
      } else {
        const licenseStatus = userLicense ? (userLicense.is_active ? 'ATIVA' : 'INATIVA') : 'SEM LICEN√áA';
        const isExpired = userLicense && userLicense.expires_at && new Date(userLicense.expires_at) < now;
        console.log(`   üë§ Usu√°rio ${userId}:`);
        console.log(`      Licen√ßa no DB: ${licenseStatus}`);
        console.log(`      Fun√ß√£o retorna: ${isActive ? 'ATIVA' : 'INATIVA'}`);
        console.log(`      Expirada: ${isExpired ? 'SIM' : 'N√ÉO'}`);
        
        if (userLicense && isExpired && userLicense.is_active && !isActive) {
          console.log(`      ‚úÖ Fun√ß√£o corretamente identifica licen√ßa expirada como inativa`);
        } else if (userLicense && isExpired && userLicense.is_active && isActive) {
          console.log(`      ‚ö†Ô∏è Fun√ß√£o n√£o est√° funcionando corretamente`);
        }
        console.log('');
      }
    }
    
    // 6. Verificar se existem fun√ß√µes relacionadas a licen√ßas
    console.log('\nüîß Testando fun√ß√µes dispon√≠veis relacionadas a licen√ßas:');
    const functionsToTest = [
      'is_user_license_active',
      'is_license_valid',
      'admin_activate_user_license',
      'admin_deactivate_user_license'
    ];
    
    for (const funcName of functionsToTest) {
      try {
        // Testar se a fun√ß√£o existe (vai dar erro se n√£o existir)
        if (funcName === 'is_user_license_active' && usersToTest.length > 0) {
          await supabase.rpc(funcName, { p_user_id: usersToTest[0] });
          console.log(`   ‚úÖ ${funcName} - EXISTE`);
        } else if (funcName === 'is_license_valid') {
          // Esta fun√ß√£o pode n√£o precisar de par√¢metros ou ter par√¢metros diferentes
          console.log(`   ‚ö†Ô∏è ${funcName} - PRECISA SER TESTADA MANUALMENTE`);
        } else {
          console.log(`   ‚ö†Ô∏è ${funcName} - PRECISA SER TESTADA MANUALMENTE`);
        }
      } catch (error) {
        if (error.message.includes('Could not find the function')) {
          console.log(`   ‚ùå ${funcName} - N√ÉO EXISTE`);
        } else {
          console.log(`   ‚úÖ ${funcName} - EXISTE (erro de par√¢metros)`);
        }
      }
    }
    
    console.log('\n' + '=' .repeat(70));
    console.log('üìã RELAT√ìRIO FINAL - SISTEMA DE EXPIRA√á√ÉO DE LICEN√áAS');
    console.log('=' .repeat(70));
    
    if (expiredButActive.length > 0) {
      console.log('‚ùå CONCLUS√ÉO: O sistema N√ÉO possui atualiza√ß√£o autom√°tica!');
      console.log('\nüîç EVID√äNCIAS ENCONTRADAS:');
      console.log(`   ‚Ä¢ ${expiredButActive.length} licen√ßas expiradas ainda marcadas como ativas`);
      console.log('   ‚Ä¢ Campo is_active n√£o √© atualizado automaticamente quando expires_at √© atingido');
      console.log('   ‚Ä¢ A valida√ß√£o de expira√ß√£o acontece apenas na fun√ß√£o is_user_license_active');
      
      console.log('\n‚öôÔ∏è COMO O SISTEMA FUNCIONA ATUALMENTE:');
      console.log('   1. Licen√ßas s√£o criadas com is_active = true (quando ativadas)');
      console.log('   2. Campo expires_at define quando a licen√ßa expira');
      console.log('   3. Campo is_active N√ÉO √© atualizado automaticamente');
      console.log('   4. Fun√ß√£o is_user_license_active verifica: is_active = true AND expires_at > NOW()');
      console.log('   5. Valida√ß√£o de expira√ß√£o √© feita em tempo real, n√£o por atualiza√ß√£o do banco');
      
      console.log('\nüí° IMPLICA√á√ïES:');
      console.log('   ‚úÖ Sistema funciona corretamente para valida√ß√£o de acesso');
      console.log('   ‚ö†Ô∏è Dados no banco podem parecer inconsistentes (licen√ßas expiradas marcadas como ativas)');
      console.log('   ‚ö†Ô∏è Relat√≥rios baseados apenas em is_active podem ser imprecisos');
      
      console.log('\nüîß RECOMENDA√á√ïES:');
      console.log('   1. MANTER sistema atual se funcionalidade est√° OK');
      console.log('   2. OU implementar job cron para atualizar is_active automaticamente');
      console.log('   3. OU sempre usar fun√ß√£o is_user_license_active para valida√ß√µes');
      console.log('   4. Para relat√≥rios, sempre considerar expires_at al√©m de is_active');
      
    } else {
      console.log('‚úÖ RESULTADO: N√£o foram encontradas licen√ßas expiradas marcadas como ativas');
      console.log('\nüìä POSS√çVEIS CEN√ÅRIOS:');
      console.log('   1. Todas as licen√ßas ainda est√£o v√°lidas');
      console.log('   2. Existe um mecanismo autom√°tico funcionando');
      console.log('   3. Licen√ßas expiradas foram manualmente desativadas');
      
      console.log('\nüîç PARA CONFIRMAR:');
      console.log('   ‚Ä¢ Aguarde algumas licen√ßas expirarem naturalmente');
      console.log('   ‚Ä¢ Ou crie uma licen√ßa de teste com expires_at no passado');
      console.log('   ‚Ä¢ Monitore se is_active √© atualizado automaticamente');
    }
    
    console.log('\nüìà RESUMO DOS DADOS:');
    console.log(`   ‚Ä¢ Total de licen√ßas: ${allLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas ativas: ${activeLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas inativas: ${inactiveLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas expiradas: ${expiredLicenses.length}`);
    console.log(`   ‚Ä¢ Licen√ßas expiradas mas ativas: ${expiredButActive.length}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a investiga√ß√£o:', error);
  }
}

// Executar a investiga√ß√£o
investigateLicenseExpiration();